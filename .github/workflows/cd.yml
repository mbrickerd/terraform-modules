name: CD

on:
  pull_request:
    branches: [ develop, main ]
    types: [ closed ]

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    name: Create Release
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        uses: cli/cli-action@v2

      - name: Extract GCP version
        id: gcp_version
        if: hashFiles('modules/gcp/versions.tf') != ''
        run: |
          VERSION=$(grep -oP 'module_version\s*=\s*"\K[^"]+' modules/gcp/versions.tf || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # For development branches, we can append a build identifier to avoid version conflicts
          if [ "${{ github.base_ref }}" != "main" ]; then
            echo "version=$VERSION-dev.$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          fi

      - name: Extract Azure version
        id: azure_version
        if: hashFiles('modules/azure/versions.tf') != ''
        run: |
          VERSION=$(grep -oP 'module_version\s*=\s*"\K[^"]+' modules/azure/versions.tf || echo "0.1.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # For development branches, we can append a build identifier to avoid version conflicts
          if [ "${{ github.base_ref }}" != "main" ]; then
            echo "version=$VERSION-dev.$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          fi

      - name: Create GCP module package
        if: steps.gcp_version.outputs.version != ''
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'terraform-gcp-modules-${{ steps.gcp_version.outputs.version }}.zip'
          directory: 'modules/gcp'

      - name: Create Azure module package
        if: steps.azure_version.outputs.version != ''
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'terraform-azure-modules-${{ steps.azure_version.outputs.version }}.zip'
          directory: 'modules/azure'

      # Publish GCP module to GitHub Packages
      - name: Publish GCP module to GitHub Packages
        if: steps.gcp_version.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Publish the package to GitHub Packages
          # This will create a package with the exact version from versions.tf
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/packages/generic/terraform-gcp-modules/${{ steps.gcp_version.outputs.version }}/terraform-gcp-modules-${{ steps.gcp_version.outputs.version }}.zip \
            -F file=@"modules/gcp/terraform-gcp-modules-${{ steps.gcp_version.outputs.version }}.zip"

          echo "Published GCP module to GitHub Packages with version ${{ steps.gcp_version.outputs.version }}"

      # Publish Azure module to GitHub Packages
      - name: Publish Azure module to GitHub Packages
        if: steps.azure_version.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Publish the package to GitHub Packages
          # This will create a package with the exact version from versions.tf
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/packages/generic/terraform-azure-modules/${{ steps.azure_version.outputs.version }}/terraform-azure-modules-${{ steps.azure_version.outputs.version }}.zip \
            -F file=@"modules/azure/terraform-azure-modules-${{ steps.azure_version.outputs.version }}.zip"

          echo "Published Azure module to GitHub Packages with version ${{ steps.azure_version.outputs.version }}"

      # Create GitHub Releases with the same versions from versions.tf
      - name: Release GCP modules
        if: steps.gcp_version.outputs.version != '' && github.base_ref == 'main'
        uses: softprops/action-gh-release@v1
        with:
          files: modules/gcp/terraform-gcp-modules-${{ steps.gcp_version.outputs.version }}.zip
          name: GCP Modules ${{ steps.gcp_version.outputs.version }}
          tag_name: gcp-${{ steps.gcp_version.outputs.version }}
          generate_release_notes: true

      - name: Release Azure modules
        if: steps.azure_version.outputs.version != '' && github.base_ref == 'main'
        uses: softprops/action-gh-release@v1
        with:
          files: modules/azure/terraform-azure-modules-${{ steps.azure_version.outputs.version }}.zip
          name: Azure Modules ${{ steps.azure_version.outputs.version }}
          tag_name: azure-${{ steps.azure_version.outputs.version }}
          generate_release_notes: true
